const TelegramBot = require("node-telegram-bot-api");
const sqlite3 = require("sqlite3").verbose();
const path = require("path");

require("dotenv").config();

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
const TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const DB_PATH = path.join(__dirname, "database.db");

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
if (!TOKEN) {
  console.error(
    "–û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —Å–æ–∑–¥–∞–ª–∏ .env —Ñ–∞–π–ª –∏ —É–∫–∞–∑–∞–ª–∏ –≤ –Ω–µ–º TELEGRAM_BOT_TOKEN"
  );
  process.exit(1);
}

const bot = new TelegramBot(TOKEN, { polling: true });
const db = new sqlite3.Database(DB_PATH);

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞
const userStates = new Map();
// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ("–ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
const userSelections = new Map();

// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
function getGroups(callback) {
  db.all(
    "SELECT DISTINCT group_name FROM schedules ORDER BY group_name",
    (err, rows) => {
      if (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–ø–ø:", err);
        callback([]);
      } else {
        const groups = rows.map((row) => row.group_name).filter(Boolean);
        callback(groups);
      }
    }
  );
}

function getTeachers(callback) {
  db.all(
    "SELECT DISTINCT teacher FROM schedules WHERE teacher IS NOT NULL AND teacher != '' ORDER BY teacher",
    (err, rows) => {
      if (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:", err);
        callback([]);
      } else {
        const allTeachers = new Set();

        rows.forEach((row) => {
          const teacher = row.teacher;
          if (teacher.includes("/")) {
            const splitTeachers = teacher
              .split("/")
              .map((t) => t.trim())
              .filter((t) => t);
            splitTeachers.forEach((t) => allTeachers.add(t));
          } else {
            allTeachers.add(teacher);
          }
        });

        const teachers = Array.from(allTeachers).sort();
        callback(teachers);
      }
    }
  );
}

function getAvailableDates(type, name, callback) {
  let query, params;

  if (type === "group") {
    query =
      "SELECT DISTINCT date, day FROM schedules WHERE group_name = ? ORDER BY date DESC";
    params = [name];
  } else {
    query = `
¬† ¬† ¬† SELECT DISTINCT date, day FROM schedules 
¬† ¬† ¬† WHERE (
¬† ¬† ¬† ¬† teacher = ? 
¬† ¬† ¬† ¬† OR teacher LIKE ? 
¬† ¬† ¬† ¬† OR teacher LIKE ?
¬† ¬† ¬† ¬† OR teacher LIKE ?
¬† ¬† ¬† )
¬† ¬† ¬† ORDER BY date DESC
¬† ¬† `;
    const likePattern1 = `%/${name}%`;
    const likePattern2 = `%${name}/%`;
    const likePattern3 = `%${name}%`;
    params = [name, likePattern1, likePattern2, likePattern3];
  }

  db.all(query, params, (err, rows) => {
    if (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞—Ç:", err);
      callback([]);
    } else {
      callback(rows);
    }
  });
}

function getGroupSchedule(group, date, callback) {
  db.all(
    `SELECT * FROM schedules WHERE group_name = ? AND date = ? ORDER BY lesson_number`,
    [group, date],
    (err, rows) => {
      if (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã:", err);
        callback([]);
      } else {
        callback(rows);
      }
    }
  );
}

function getTeacherSchedule(teacher, date, callback) {
  const query = `
¬† ¬† SELECT * FROM schedules 
¬† ¬† WHERE date = ? 
¬† ¬† AND (
¬† ¬† ¬† teacher = ? 
¬† ¬† ¬† OR teacher LIKE ? 
¬† ¬† ¬† OR teacher LIKE ?
¬† ¬† ¬† OR teacher LIKE ?
¬† ¬† )
¬† ¬† ORDER BY lesson_number
¬† `;

  const likePattern1 = `%/${teacher}%`;
  const likePattern2 = `%${teacher}/%`;
  const likePattern3 = `%${teacher}%`;

  db.all(
    query,
    [date, teacher, likePattern1, likePattern2, likePattern3],
    (err, rows) => {
      if (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:", err);
        callback([]);
      } else {
        callback(rows);
      }
    }
  );
}

function getTeacherPartners(teacher, callback) {
  const query = `
  SELECT DISTINCT teacher 
  FROM schedules 
  WHERE teacher LIKE ? 
  AND teacher != ?
  AND teacher LIKE '%/%'
  `;

  db.all(query, [`%${teacher}%`, teacher], (err, rows) => {
    if (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:", err);
      callback([]);
    } else {
      const partners = rows.map((row) => row.teacher);
      callback(partners);
    }
  });
}

// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ---

function formatSchedule(schedule) {
  if (schedule.length === 0) {
    return "‚úÖ –ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç.";
  }

  let result = `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è ${
    schedule[0].group_name
      ? `–≥—Ä—É–ø–ø—ã ${schedule[0].group_name}`
      : `–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è ${schedule[0].teacher}`
  }\n`;
  result += `üìÜ –î–∞—Ç–∞: ${schedule[0].date} (${schedule[0].day})\n\n`;

  schedule.forEach((lesson) => {
    if (lesson.lesson_number) {
      result += `üïí –ü–∞—Ä–∞ ${lesson.lesson_number || "?"}\n`;
      if (lesson.subject) {
        result += `üìö –ü—Ä–µ–¥–º–µ—Ç: ${lesson.subject}\n`;
      } else {
        result += `üìö –ü—Ä–µ–¥–º–µ—Ç: ‚ö†Ô∏è–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–∞–º–∏!\n`;
      }
    } else {
      result += `‚ùó –†–∞–∑–≥–æ–≤–æ—Ä—ã –æ –≤–∞–∂–Ω–æ–º\n`;
      if (lesson.arrival_time) {
        result += `‚è∞ –í—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥–∞: ${lesson.arrival_time}\n`;
      }
    }

    if (lesson.classroom) {
      result += `üö™ –ê—É–¥–∏—Ç–æ—Ä–∏—è: ${lesson.classroom}\n`;
    } else {
      result += `üö™ –ê—É–¥–∏—Ç–æ—Ä–∏—è: –Ω–µ—Ç\n`;
    }

    if (schedule[0].group_name) {
      result += `üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: ${lesson.teacher}\n`;
    } else {
      result += `üë• –ì—Ä—É–ø–ø–∞: ${lesson.group_name}\n`;
    }

    result += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
  });

  return result;
}

// –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ "–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–∏—Ö–æ–¥–∞"
function showMainMenu(chatId, message = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:") {
  bot.sendMessage(chatId, message, {
    reply_markup: {
      keyboard: [
        [{ text: "üìã –ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ" }],
        [{ text: "üë• –ì—Ä—É–ø–ø—ã" }, { text: "üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏" }],
        [{ text: "üïí –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–∏—Ö–æ–¥–∞" }, { text: "üåê –°–∞–π—Ç" }],
      ],
      resize_keyboard: true,
    },
  });
}

function showDateSelection(chatId, type, name, isSettingMySchedule = false) {
  getAvailableDates(type, name, (dates) => {
    if (dates.length === 0) {
      bot.sendMessage(chatId, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞.");
      userStates.delete(chatId);
      showMainMenu(chatId);
      return;
    }

    const keyboard = dates.map((date) => [
      { text: `${date.date} (${date.day})` },
    ]);

    keyboard.push([{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" }]);

    userStates.set(chatId, {
      step: "select_date",
      type,
      name,
      isSettingMySchedule,
      dates,
    });

    bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", {
      reply_markup: {
        keyboard,
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    });
  });
}

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---

bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  userStates.delete(chatId);
  showMainMenu(
    chatId,
    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
  );
});

// –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω case –¥–ª—è "–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–∏—Ö–æ–¥–∞"
bot.on("message", (msg) => {
  if (msg.text.startsWith("/")) return;

  const chatId = msg.chat.id;
  const text = msg.text;
  const state = userStates.get(chatId);

  if (!state) {
    switch (text) {
      case "üìã –ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        handleMySchedule(chatId);
        break;
      case "üë• –ì—Ä—É–ø–ø—ã":
        handleGroups(chatId);
        break;
      case "üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏":
        handleTeachers(chatId);
        break;
      case "üïí –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–∏—Ö–æ–¥–∞":
        handleArrivalSchedule(chatId);
        break;
      case "üåê –°–∞–π—Ç":
        handleWebsite(chatId);
        break;
      default:
        showMainMenu(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.");
    }
    return;
  }

  switch (state.step) {
    case "select_type_for_my_schedule":
      handleUserTypeSelection(chatId, text, true);
      break;
    case "select_group_for_my_schedule":
      handleGroupSelection(chatId, text, true);
      break;
    case "select_teacher_for_my_schedule":
      handleTeacherSelection(chatId, text, true);
      break;
    case "select_group_from_list":
      handleGroupSelection(chatId, text, false);
      break;
    case "select_teacher_from_list":
      handleTeacherSelection(chatId, text, false);
      break;
    case "select_date":
      handleDateSelection(chatId, text, state);
      break;
  }
});

bot.on("callback_query", (query) => {
  const chatId = query.message.chat.id;

  if (query.data === "change_my_schedule") {
    userSelections.delete(chatId);
    bot.answerCallbackQuery(query.id, { text: "–í–∞—à –≤—ã–±–æ—Ä —Å–±—Ä–æ—à–µ–Ω!" });
    bot.sendMessage(
      chatId,
      "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è."
    );
    promptUserType(chatId, true);
  }

  if (query.data.startsWith("teacher_")) {
    const teacherName = query.data.replace("teacher_", "");
    userStates.set(chatId, { step: "select_teacher_for_my_schedule" });
    handleTeacherSelection(chatId, teacherName, true);
  }
});

// --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

function handleMySchedule(chatId) {
  const selection = userSelections.get(chatId);

  if (selection) {
    const { type, name } = selection;
    showDateSelection(chatId, type, name, true);
  } else {
    promptUserType(chatId, true);
  }
}

function promptUserType(chatId, isSettingMySchedule) {
  const step = isSettingMySchedule
    ? "select_type_for_my_schedule"
    : "select_type_from_list";
  userStates.set(chatId, { step });

  bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Å—Ç–∞—Ç—É—Å:", {
    reply_markup: {
      keyboard: [
        [{ text: "üë• –Ø —Å—Ç—É–¥–µ–Ω—Ç" }, { text: "üë®‚Äçüè´ –Ø –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å" }],
        [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" }],
      ],
      resize_keyboard: true,
      one_time_keyboard: true,
    },
  });
}

function handleUserTypeSelection(chatId, text, isSettingMySchedule) {
  if (text === "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é") {
    userStates.delete(chatId);
    showMainMenu(chatId);
    return;
  }

  const targetStep =
    text === "üë• –Ø —Å—Ç—É–¥–µ–Ω—Ç"
      ? isSettingMySchedule
        ? "select_group_for_my_schedule"
        : "select_group_from_list"
      : isSettingMySchedule
      ? "select_teacher_for_my_schedule"
      : "select_teacher_from_list";

  userStates.set(chatId, { step: targetStep });

  if (text === "üë• –Ø —Å—Ç—É–¥–µ–Ω—Ç") {
    showGroupSelection(chatId, isSettingMySchedule);
  } else if (text === "üë®‚Äçüè´ –Ø –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å") {
    showTeacherSelection(chatId, isSettingMySchedule);
  }
}

function showGroupSelection(chatId, isSettingMySchedule) {
  getGroups((groups) => {
    if (groups.length === 0) {
      bot.sendMessage(chatId, "–ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
      userStates.delete(chatId);
      showMainMenu(chatId);
      return;
    }
    const keyboard = groups.map((group) => [{ text: group }]);
    keyboard.push([
      { text: isSettingMySchedule ? "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" : "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" },
    ]);
    bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", {
      reply_markup: {
        keyboard,
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    });
  });
}

function showTeacherSelection(chatId, isSettingMySchedule) {
  getTeachers((teachers) => {
    if (teachers.length === 0) {
      bot.sendMessage(chatId, "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
      userStates.delete(chatId);
      showMainMenu(chatId);
      return;
    }
    const keyboard = teachers.map((teacher) => [{ text: teacher }]);
    keyboard.push([
      { text: isSettingMySchedule ? "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" : "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" },
    ]);
    bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:", {
      reply_markup: {
        keyboard,
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    });
  });
}

function handleGroupSelection(chatId, groupName, isSettingMySchedule) {
  if (groupName === "‚¨ÖÔ∏è –ù–∞–∑–∞–¥") {
    promptUserType(chatId, isSettingMySchedule);
    return;
  }
  if (groupName === "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é") {
    userStates.delete(chatId);
    showMainMenu(chatId);
    return;
  }

  showDateSelection(chatId, "group", groupName, isSettingMySchedule);
}

function handleTeacherSelection(chatId, teacherName, isSettingMySchedule) {
  if (teacherName === "‚¨ÖÔ∏è –ù–∞–∑–∞–¥") {
    promptUserType(chatId, isSettingMySchedule);
    return;
  }
  if (teacherName === "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é") {
    userStates.delete(chatId);
    showMainMenu(chatId);
    return;
  }

  showDateSelection(chatId, "teacher", teacherName, isSettingMySchedule);
}

function handleDateSelection(chatId, text, state) {
  if (text === "‚¨ÖÔ∏è –ù–∞–∑–∞–¥") {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø—ã/–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    userStates.set(chatId, {
      step:
        state.type === "group"
          ? "select_group_from_list"
          : "select_teacher_from_list",
      isSettingMySchedule: state.isSettingMySchedule,
    });
    if (state.type === "group") {
      showGroupSelection(chatId, state.isSettingMySchedule);
    } else {
      showTeacherSelection(chatId, state.isSettingMySchedule);
    }
    return;
  } // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç: "DD MMMM (day)")

  const selectedDate = text.split(" (")[0];

  const scheduleFunction =
    state.type === "group" ? getGroupSchedule : getTeacherSchedule;

  scheduleFunction(state.name, selectedDate, (schedule) => {
    if (schedule.length === 0) {
      bot.sendMessage(chatId, "‚ùå –ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –∑–∞–Ω—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
      userStates.delete(chatId);
      showMainMenu(chatId);
      return;
    }

    const formattedSchedule = formatSchedule(schedule);

    if (state.isSettingMySchedule) {
      userSelections.set(chatId, { type: state.type, name: state.name });
      //   bot.sendMessage(
      //     chatId,
      //     `‚úÖ –û—Ç–ª–∏—á–Ω–æ! –Ø –∑–∞–ø–æ–º–Ω–∏–ª –≤–∞—à –≤—ã–±–æ—Ä: ${
      //       state.type === "group" ? "–≥—Ä—É–ø–ø–∞ " + state.name : state.name
      //     }.`
      //   );
    }

    if (state.type === "teacher") {
      getTeacherPartners(state.name, (partners) => {
        let finalMessage = formattedSchedule;

        if (partners.length > 0) {
          finalMessage += `\nüìù –≠—Ç–æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Ç–∞–∫–∂–µ –≤–µ–¥–µ—Ç –∑–∞–Ω—è—Ç–∏—è —Å:\n`;
          partners.forEach((partner) => {
            finalMessage += `‚Ä¢ ${partner}\n`;
          });
        }

        bot.sendMessage(chatId, finalMessage);
        userStates.delete(chatId);
        showMainMenu(chatId, "–ß—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ?");
      });
    } else {
      bot.sendMessage(chatId, formattedSchedule);
      userStates.delete(chatId);
      showMainMenu(chatId, "–ß—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ?");
    }
  });
}

function handleGroups(chatId) {
  userStates.set(chatId, { step: "select_group_from_list" });
  showGroupSelection(chatId, false);
}

function handleTeachers(chatId) {
  userStates.set(chatId, { step: "select_teacher_from_list" });
  showTeacherSelection(chatId, false);
}

function handleArrivalSchedule(chatId) {
  const imagePath = path.join(__dirname, "./assets/time.png");
  bot
    .sendPhoto(chatId, imagePath, {
      caption: "–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–∏—Ö–æ–¥–∞ –æ–±—É—á–∞—é—â–∏—Ö—Å—è (–í –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è)",
    })
    .catch((error) => {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ:", error.code);
      bot.sendMessage(
        chatId,
        "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω."
      );
    });
}

function handleWebsite(chatId) {
  const websiteUrl = "https://cloud.nntc.nnov.ru/index.php/s/fYpXD39YccFB5gM";
  bot.sendMessage(chatId, `üåê –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç:\n${websiteUrl}`);
}

bot.on("polling_error", (error) => {
  console.error("Polling error:", error.code);
});

console.log("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω...");
